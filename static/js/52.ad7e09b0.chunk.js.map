{"version":3,"file":"static/js/52.ad7e09b0.chunk.js","mappings":"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","sources":["content/DisplayType.ts","content/SchemaConverter.ts","content/GameContext.ts","content/comparators/AgeComparator.ts","content/comparators/HeightComparator.ts","content/comparators/NameComparator.ts","content/comparators/SimpleStringComparator.ts","content/comparators/PositionComparator.ts","content/comparators/SimpleNumberComparator.ts","content/comparators/TeamComparator.ts","ronadle/Ronalde.ts","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/get.js"],"sourcesContent":["export enum DisplayType {\n    TEXT,\n    HEIGHT,\n    IMAGE,\n    IMAGE_WITH_BORDER,\n    MULTI_IMAGE\n}\n\n","export namespace SchemaConverter {\n    export function convertInchesToFeet(inches: number): string {\n        let feet = Math.floor(inches / 12);\n        let remaining_inches = inches % 12;\n        return `${feet}' ${remaining_inches}\"`\n    }\n}\n","import {BaseComparator, Result, ResultState} from './comparators/BaseComparator';\nimport {DetailedDisplayProperties, DisplayProperties, DisplayPropertyType} from './displayproperties/DisplayProperties';\nimport {DisplayType} from './DisplayType';\nimport {GameOption} from '../game/Game';\nimport {SchemaConverter} from './SchemaConverter';\nimport {DateUtils} from '../game/DateUtils';\n\nexport interface SchemaValue {\n    type: DisplayType,\n    comparator: BaseComparator<any>\n    title: string,\n    columnWidth: number,\n}\n\ninterface GuessProperties {\n    result: Result,\n    displayProperty: DisplayProperties\n}\n\nexport class Guess<T> {\n    constructor(\n        private option: T,\n        private properties: Map<string, GuessProperties>\n    ) {\n\n    }\n\n    getOption(): T {\n        return this.option;\n    }\n\n    getDisplayPropertyForKey(key: string): DisplayProperties {\n        return this.properties.get(key)!.displayProperty;\n    }\n\n    getResultForKey(key: string): Result {\n        return this.properties.get(key)!.result;\n    }\n\n    isMatch(): boolean {\n        return Array.from(this.properties.values()).map(info => info.result.state === ResultState.MATCH).reduce((previousValue, currentValue) => previousValue && currentValue);\n    }\n}\n\nconst FAR = \"â¬›\";\nconst CLOSE = \"ðŸŸ¨\";\nconst MATCH = \"ðŸŸ©\";\n\nexport abstract class GameContext<T> {\n    private readonly actual: T;\n    private readonly gameNumber: number;\n\n    protected constructor(\n        startTimestamp: Date,\n        private primaryKey: string,\n        private labelKey: string,\n        private schemaValues: Map<string, SchemaValue>,\n        private columnOrder: string[],\n        public title: string,\n        public totalGuesses: number,\n        private optionImageUrl: string,\n        protected options: T[],\n        protected dailyGames: number[],\n    ) {\n        const dailyGameIndex = DateUtils.DaysAgo(startTimestamp, new Date());\n        const dailyGamePlayerId = dailyGames[dailyGameIndex];\n        if (dailyGameIndex === undefined) {\n            console.log(\"we are out of games lol\");\n            throw Error;\n        }\n        this.gameNumber = dailyGameIndex + 1;\n        console.log(`Daily game #${this.gameNumber}`);\n        this.actual = options.find(value => GameContext.GetValueOfOption(value, this.primaryKey) === dailyGamePlayerId)!;\n    }\n\n    isFinished(guesses: Guess<T>[]) {\n        const isMatch = guesses[guesses.length - 1]?.isMatch() || false;\n        const maxGuesses = guesses.length === this.totalGuesses;\n        return isMatch || maxGuesses;\n    }\n\n    getActualResultInformation(): [string, string] {\n        const id = GameContext.GetValueOfOption(this.actual, this.primaryKey);\n        const label = GameContext.GetValueOfOption(this.actual, this.labelKey) as string;\n        return [label, this.optionImageUrl.replace(\"%d\", id)];\n    }\n\n    getOptions(alreadyGuessed: T[]): GameOption<T>[] {\n        return this.options.filter(option => {\n            const optionId = GameContext.GetValueOfOption(option, \"id\");\n            return !alreadyGuessed.map(guess => GameContext.GetValueOfOption(guess, \"id\")).includes(optionId);\n        }).map(option => {\n                const label = GameContext.GetValueOfOption(option, this.labelKey);\n                return {\n                    value: option,\n                    label: label\n                };\n            }\n        );\n    }\n\n    getColumnTitles(): string[] {\n        return this.columnOrder.map(columnKey => this.schemaValues.get(columnKey)!.title);\n    }\n\n    getColumnWidths(): number[] {\n        const columnWidths = this.columnOrder.map(columnKey => this.schemaValues.get(columnKey)!.columnWidth);\n        const columnWidthSum = columnWidths.reduce((prev, curr) => prev + curr);\n        return columnWidths.map(width => Math.floor(width / columnWidthSum) * 100);\n    }\n\n    processGuess(guess: T): Guess<T> {\n        const properties = new Map<string, GuessProperties>();\n        const id = GameContext.GetValueOfOption(guess, \"id\") as number;\n        Object.keys(guess).filter(key => key !== this.primaryKey).forEach((key) => {\n            const guessValue = GameContext.GetValueOfOption(guess, key);\n            const actualValue = GameContext.GetValueOfOption(this.actual, key);\n            const result = this.schemaValues.get(key)!.comparator.compare(guessValue, actualValue);\n            properties.set(key, {\n                result: result,\n                displayProperty: this.getDisplayProperties(id, result, key, guessValue)\n            });\n        });\n        return new Guess(guess, properties);\n    }\n\n    getResultMessage(guesses: Guess<T>[]): string {\n        let result = `${this.title} #${this.gameNumber} - ${guesses.length}/${this.totalGuesses}\\n`;\n        result += this.getGuessDisplayResult(guesses, true).map(guess => {\n            return guess.map(cell => {\n                switch (cell.state) {\n                    case ResultState.MATCH:\n                        return MATCH;\n                    case ResultState.CLOSE:\n                        return CLOSE;\n                    default:\n                    case ResultState.FAR:\n                        return FAR;\n                }\n            }).join(\"\");\n        }).join(\"\\n\");\n        return result;\n    }\n\n    getGuessDisplayProperties(guesses: Guess<T>[]): DisplayProperties[][] {\n        return guesses.map(guess => {\n            return this.columnOrder.map(columnKey => guess.getDisplayPropertyForKey(columnKey));\n        });\n    }\n\n    getGuessDisplayResult(guesses: Guess<T>[], forResultMessage: boolean = false): Result[][] {\n        return guesses.map(guess => {\n            return this.columnOrder.filter(columnKey => {\n                return !(forResultMessage && columnKey === this.labelKey);\n            }).map(columnKey => guess.getResultForKey(columnKey));\n        });\n    }\n\n    protected verifySchema() {\n        // TODO: verify that everything passed in is legit\n    }\n\n    protected getImageDetails(value: any, key: string): [string[], string[]] {\n        switch (key) {\n            case \"nationality\":\n                return [[`https://flagcdn.com/${(value as string).toLowerCase()}.svg`], [value]];\n            default:\n                return [[\"\"], [\"\"]];\n        }\n    }\n\n    private getDisplayProperties(id: number, result: Result, key: string, value: any): DisplayProperties {\n        const type = this.schemaValues.get(key)!.type;\n        let exactProperties: DetailedDisplayProperties;\n        let displayPropertyType: DisplayPropertyType;\n        switch (type) {\n            case DisplayType.IMAGE:\n            case DisplayType.IMAGE_WITH_BORDER: {\n                const details = this.getImageDetails(value, key);\n                exactProperties = {\n                    url: details[0][0],\n                    description: details[1][0],\n                    border: type === DisplayType.IMAGE_WITH_BORDER\n                };\n                displayPropertyType = DisplayPropertyType.IMAGE;\n                break;\n            }\n            case DisplayType.MULTI_IMAGE: { // TODO: Maybe clean up a bit\n                const details = this.getImageDetails(value, key);\n                exactProperties = {\n                    url1: details[0][0],\n                    description1: details[1][0],\n                    url2: details[0][1],\n                    description2: details[1][1]\n                };\n                displayPropertyType = DisplayPropertyType.MULTI_IMAGE;\n                break;\n            }\n            case DisplayType.HEIGHT: {\n                exactProperties = {\n                    content: SchemaConverter.convertInchesToFeet(value as number)\n                };\n                displayPropertyType = DisplayPropertyType.TEXT;\n                break;\n            }\n            case DisplayType.TEXT: {\n                exactProperties = {\n                    content: value as string\n                };\n                displayPropertyType = DisplayPropertyType.TEXT;\n                break;\n            }\n        }\n        return {\n            key: `${id}_${key}_${value}`,\n            state: result.state,\n            direction: result.direction,\n            type: displayPropertyType,\n            detailedProperties: exactProperties\n        };\n    }\n\n    private static GetValueOfOption<T>(option: T, key: string): any {\n        return option[key as keyof T] as any;\n    }\n}\n","import {SimpleNumberComparator} from './SimpleNumberComparator';\n\nclass AgeComparator extends SimpleNumberComparator {\n    constructor(closeThreshold: number) {\n        super(closeThreshold);\n    }\n}\n\nexport {AgeComparator};\n","import {SimpleNumberComparator} from './SimpleNumberComparator';\n\n/**\n * Assumes heights are in mm\n */\nclass HeightComparator extends SimpleNumberComparator {\n    constructor(closeThreshold: number) {\n        super(closeThreshold);\n    }\n}\n\nexport {HeightComparator};\n","import {SimpleStringComparator} from './SimpleStringComparator';\n\nclass NameComparator extends SimpleStringComparator {\n    constructor() {\n        super();\n    }\n}\n\nexport {NameComparator};\n","import {BaseComparator, Result, ResultState} from './BaseComparator';\n\nabstract class SimpleStringComparator implements BaseComparator<string> {\n    protected constructor() {\n\n    }\n\n    compare(guess: string, actual: string): Result {\n        if (guess == actual) {\n            return {state: ResultState.MATCH};\n        } else {\n            return {state: ResultState.FAR}\n        }\n    }\n}\n\nexport {SimpleStringComparator};\n","import {BaseComparator, Result, ResultState} from './BaseComparator';\n\ntype PlayerPosition = string\n\nclass PositionComparator implements BaseComparator<PlayerPosition> {\n    constructor(private positions: any) {\n\n    }\n\n    compare(guess: PlayerPosition, actual: PlayerPosition): Result {\n        if (guess == actual) {\n            return {state: ResultState.MATCH};\n        } else {\n            if (this.positions[guess][\"category\"] == this.positions[actual][\"category\"]) {\n                return {state: ResultState.CLOSE};\n            } else {\n                return {state: ResultState.FAR};\n            }\n        }\n    }\n}\n\nexport {PositionComparator};\nexport type {PlayerPosition};\n","import {CloseDirection, BaseComparator, Result, ResultState} from './BaseComparator';\n\nabstract class SimpleNumberComparator implements BaseComparator<number> {\n    protected constructor(private closeThreshold: number) {\n\n    }\n\n    compare(guess: number, actual: number): Result {\n        if (guess == actual) {\n            return {state: ResultState.MATCH};\n        } else {\n            const state = Math.abs(guess - actual) <= this.closeThreshold ? ResultState.CLOSE : ResultState.FAR;\n            const direction = guess > actual ? CloseDirection.DOWN : CloseDirection.UP;\n            return {state: state, direction: direction};\n        }\n    }\n}\n\nexport {SimpleNumberComparator};\n","import {BaseComparator, Result, ResultState} from './BaseComparator';\n\ntype TeamId = string\n\nclass TeamComparator implements BaseComparator<TeamId> {\n    constructor(private teams: any) {\n\n    }\n\n    compare(guess: TeamId, actual: TeamId): Result {\n        if (guess == actual) {\n            return {state: ResultState.MATCH};\n        } else {\n            if (this.teams[guess][\"division\"] == this.teams[actual][\"division\"]) {\n                return {state: ResultState.CLOSE};\n            } else {\n                return {state: ResultState.FAR};\n            }\n        }\n    }\n}\n\nexport {TeamComparator};\nexport type {TeamId};\n","import {NameComparator} from '../content/comparators/NameComparator';\nimport {AgeComparator} from '../content/comparators/AgeComparator';\nimport {GameContext} from '../content/GameContext';\nimport {DisplayType} from '../content/DisplayType';\nimport {HeightComparator} from '../content/comparators/HeightComparator';\nimport {PositionComparator} from '../content/comparators/PositionComparator';\n\nimport positions from \"./positions.json\";\nimport options from \"./players.json\";\nimport teams from \"./teams.json\";\nimport games from \"./daily_games.json\";\nimport leagues from \"./leagues.json\";\nimport {BaseComparator, Result, ResultState} from '../content/comparators/BaseComparator';\nimport {TeamComparator} from '../content/comparators/TeamComparator';\n\nexport interface RonaldeSchema {\n    id: number,\n    name: string,\n    age: number,\n    team: number,\n    height: number,\n    nationality: string,\n    position: string\n}\n\nconst HEADSHOT_URL = \"https://raw.githubusercontent.com/sports3/ronalde-images/main/players/headshot_%d.png\";\nconst LEAGUE_LOGO_URL = \"https://raw.githubusercontent.com/sports3/ronalde-images/main/leagues/logo_%d.png\";\nconst TEAM_LOGO_URL = \"https://raw.githubusercontent.com/sports3/ronalde-images/main/teams/logo_%d.png\";\n\nconst START_DATE = new Date(2022, 2, 10);\n\nexport class RonaldeContext extends GameContext<RonaldeSchema> {\n    constructor() {\n        let schemaValues = new Map([\n            [\"name\", {title: \"Player\", type: DisplayType.TEXT, comparator: new NameComparator(), columnWidth: 5}],\n            [\"age\", {title: \"Age\", type: DisplayType.TEXT, comparator: new AgeComparator(3), columnWidth: 1}],\n            [\"team\", {\n                title: \"Team\",\n                type: DisplayType.MULTI_IMAGE,\n                comparator: new TeamComparator(teams),\n                columnWidth: 5\n            }],\n            [\"height\", {\n                title: \"Height\",\n                type: DisplayType.HEIGHT,\n                comparator: new HeightComparator(3),\n                columnWidth: 2\n            }],\n            [\"nationality\", {\n                title: \"Nationality\",\n                type: DisplayType.IMAGE_WITH_BORDER,\n                comparator: new NameComparator(),\n                columnWidth: 4\n            }],\n            [\"position\", {\n                title: \"Position\",\n                type: DisplayType.TEXT,\n                comparator: new PositionComparator(positions),\n                columnWidth: 1\n            }],\n            [\"foot\", {title: \"Foot\", type: DisplayType.TEXT, comparator: new NameComparator(), columnWidth: 1}],\n        ]);\n        super(START_DATE, \"id\", \"name\", schemaValues, [\"name\", \"team\", \"nationality\", \"age\", \"height\", \"position\", \"foot\"], \"Ronalde\", 6, HEADSHOT_URL, options, games);\n    }\n\n    protected override getImageDetails(value: any, key: string): [string[], string[]] {\n        switch (key) {\n            case \"team\":\n                const team = teams[value as keyof typeof teams];\n                const leagueId = team[\"division\"] as any;\n                const league = leagues[leagueId as keyof typeof leagues];\n                const logos = [TEAM_LOGO_URL.replace(\"%d\", value), LEAGUE_LOGO_URL.replace(\"%d\", leagueId)];\n                const descriptions = [team[\"name\"], league[\"name\"]];\n                return [logos, descriptions];\n            default:\n                return super.getImageDetails(value, key);\n        }\n    }\n}\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}"],"names":["DisplayType","SchemaConverter","inches","feet","Math","floor","remaining_inches","Guess","option","properties","this","key","get","displayProperty","result","Array","from","values","map","info","state","ResultState","reduce","previousValue","currentValue","GameContext","startTimestamp","primaryKey","labelKey","schemaValues","columnOrder","title","totalGuesses","optionImageUrl","options","dailyGames","actual","gameNumber","dailyGameIndex","DateUtils","Date","dailyGamePlayerId","undefined","console","log","Error","find","value","GetValueOfOption","guesses","isMatch","length","maxGuesses","id","replace","alreadyGuessed","filter","optionId","guess","includes","label","columnKey","columnWidths","columnWidth","columnWidthSum","prev","curr","width","Map","Object","keys","forEach","guessValue","actualValue","comparator","compare","set","getDisplayProperties","getGuessDisplayResult","cell","join","getDisplayPropertyForKey","forResultMessage","getResultForKey","toLowerCase","exactProperties","displayPropertyType","type","details","getImageDetails","url","description","border","DisplayPropertyType","url1","description1","url2","description2","content","convertInchesToFeet","direction","detailedProperties","AgeComparator","closeThreshold","SimpleNumberComparator","HeightComparator","NameComparator","SimpleStringComparator","PositionComparator","positions","abs","CloseDirection","TeamComparator","teams","START_DATE","RonaldeContext","games","team","leagueId","league","leagues","_superPropBase","object","property","prototype","hasOwnProperty","call","getPrototypeOf","_get","Reflect","target","receiver","base","desc","getOwnPropertyDescriptor","arguments","apply"],"sourceRoot":""}